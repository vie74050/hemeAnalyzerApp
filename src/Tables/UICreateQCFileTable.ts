import { LineGraph, IChartData } from '../Graph/UICreateLineGraph';
import { GetData } from '../Data/GetGSheetsData';

var tableRef: HTMLTableElement;
var backbutton: HTMLButtonElement;

/** Row Click hanlder: Creates Graphs for parameters of itemid  */
function GraphQCFile(itemid: string = 'QC-001', fileInfo: Record<string,string>={}) {
    const graphscontainerID: string = 'graphscontainer';
    const container = document.getElementById(graphscontainerID);
    if (!container) {
        console.error('Graphs container not found.');
    }
    const subgroup = 'HAParameter';
    let data = GetData();
    data.then((data) => {
        container.innerHTML = "";

        if (data !== null) {
            // filter data for the first Item = itemid
            const parentItem = data.find((item) => item['Item'] === itemid);
            const analysisdates = parentItem['Analysis dates -->'];
            const xData = analysisdates.split(';');

            // create header row container div class graphrowheader for fileInfo
            const fileInfoContainer = document.createElement('div');
            fileInfoContainer.setAttribute('class', 'graphrowheader');
            container?.appendChild(fileInfoContainer);

            // foreach fileInfo, create div class graphrowheaderitem
            for (const [key, value] of Object.entries(fileInfo)) { 
                let graphrowheaderitem = document.createElement('div');
                graphrowheaderitem.setAttribute('class', 'graphrowheaderitem');
                graphrowheaderitem.innerText = `${key}: ${value}`;
                fileInfoContainer.appendChild(graphrowheaderitem);
            }          
            
            // filter data for items that have Groups= itemid and subgroup = 'HA Praameter'
            let paramerterData = data.filter((item) => {
                return item['Groups'] === itemid && item['Subgroup'] === subgroup;
            });

            // create heading row for graph
            const headingRow = new LineGraph({
                canvasId: 'headingRow',
                xData: [],
                yData: [],
                yTitle: 'Item',
                yMin: 0,
                yMax: 1,
                sd: "sd",
                mean: "mean",
                cv: "cv"
            });
            container?.appendChild(headingRow.CreateGraphHeader());
            

            // for each parameterData, create new LineGraph
            paramerterData.forEach((item) => {
                const id = item['Item'].toLowerCase().replace(/[^A-Z0-9]/ig, '');
                const yData = xData.map((s, i) => {
                    let dateHeader = 'Date' + (i + 1);
                    return Number(item[dateHeader]);
                });
                const yTitle = item['Label'].length > 0 ? item['Label'] : item['Item'];
                const yMin = Number(item['AllowedMin']);
                const yMax = Number(item['AllowedMax']); //console.log(xData);
                const sd = Number(item['SD']);
                const mean = Number(item['Mean']);  
                const cv = Number(item['CV']);
                const chartData: IChartData = {
                    canvasId: id,
                    xData: xData,
                    yData: yData,
                    yTitle: yTitle,
                    yMin: yMin,
                    yMax: yMax,
                    sd: sd,
                    mean: mean,
                    cv: cv
                }
                const chart = new LineGraph(chartData);
                container?.appendChild(chart.CreateGraphRow());
                
            });

        }
    });
}

/** Populates table from GetData where Groups="QCSample" = table row
 * Expected table <th>s: File, Lot#, Material, Exp. Date, Analysis dates
*/
function UICreateQCFileTableDataRows(table: HTMLTableElement){
    const maxRows = 1000;
    const data = GetData();
    const tbody = document.createElement('tbody');
    table.appendChild(tbody);
    tableRef = table;

    data.then((data) => {
        if (data !== null) {
            // filter data for items that have Groups="QCSample"
            let sampleData = data.filter((row) => {
                return row['Groups'] === 'QCSample';
            });

            // create row for each sampleData where 
            // td1 = autogenerated line number
            // td2 = Label or Item
            // td(n) = lookup data Description where subgroup=SampleInfo, Groups=Item, Item=headingInfoUnique
            // td(last) = last column is the item's most recent analysis date
            sampleData.forEach((item, i) => {
                let tableRowInfo = {};
                
                let tr = document.createElement('tr');
                tbody.appendChild(tr);

                let td1text_fileNo = "QC"+(i+1).toString().padStart(maxRows.toString().length, '0');
                let td2text_lotNo = item['Label'].length > 0 ? item['Label'] : item['Item'];
              
                tableRowInfo["File"] = td1text_fileNo;
                tableRowInfo["Lot #"] = td2text_lotNo;
                tableRowInfo["Material"] = data.filter((row) => row['Subgroup'] === 'SampleInfo' && row['Groups'] === item['Item'] && row['Item'] === 'Material')[0]['Description'];
                tableRowInfo["Expiry Date"] = data.filter((row) => row['Subgroup'] === 'SampleInfo' && row['Groups'] === item['Item'] && row['Item'] === 'Expiry Date')[0]['Description'];

                let analysisdates = item['Analysis dates -->'];
                let analysisdatesArray = analysisdates.split(';');
                let analysisdate = analysisdatesArray[analysisdatesArray.length - 1];

                // add td content to table row
                let td0 = document.createElement('td'); // Error warning
                td0.innerHTML = item['Status'] != 'OK' ? '&#9888;' : '';
                tr.appendChild(td0);
                let td1 = document.createElement('td'); // File
                td1.innerText = td1text_fileNo; 
                tr.appendChild(td1);    
                let td2 = document.createElement('td'); // Lot #
                td2.innerText = td2text_lotNo;
                tr.appendChild(td2);
                let td3 = document.createElement('td'); // Material
                td3.innerText = tableRowInfo["Material"];
                tr.appendChild(td3);
                let td4 = document.createElement('td'); // Expiry Date
                td4.innerText = tableRowInfo["Expiry Date"];
                tr.appendChild(td4);
                let td5 = document.createElement('td'); // Analysis Date
                td5.innerText = analysisdate;
                tr.appendChild(td5);

                // add click event to each row
                tr.addEventListener('click', function () {  
                    GraphQCFile(item['Item'], tableRowInfo);
                    // hide table
                    table.style.display = 'none';
                    // add back button that shows table
                    const backbtn = document.createElement('button');    
                    backbutton = backbtn as HTMLButtonElement;        
                    backbtn.innerHTML = "&#9668 Back";                              

                    backbtn.addEventListener('click', function () {
                        eventHandlerQCFiles();
                    });
                    document.getElementById('top-menu')?.appendChild(backbtn);  
                });

            });

            // create remaining empty rows
            for (let i = sampleData.length; i < maxRows; i++) {
                let tr = document.createElement('tr');
                tbody.appendChild(tr);
                let td0 = document.createElement('td'); // Error warning
                td0.innerHTML = '';
                tr.appendChild(td0);
                let td1 = document.createElement('td'); // File
                td1.innerText = "QC"+(i+1).toString().padStart(maxRows.toString().length, '0');
                tr.appendChild(td1);    
                let td2 = document.createElement('td'); // Lot #
                td2.innerText = "";
                tr.appendChild(td2);
                let td3 = document.createElement('td'); // Material
                td3.innerText = "";
                tr.appendChild(td3);
                let td4 = document.createElement('td'); // Expiry Date
                td4.innerText = "";
                tr.appendChild(td4);
                let td5 = document.createElement('td'); // Analysis Date
                td5.innerText = "";
                tr.appendChild(td5);
            }

        }
    });

}

function eventHandlerQCFiles() {
    tableRef.style.display = 'table';
    document.getElementById('graphscontainer').innerHTML = "";
    if (backbutton) {
        document.getElementById('top-menu')?.removeChild(backbutton);
        backbutton = null;
    }
}

/**Returns the HTML table:
 <table id="qcfiletable" class="table" style="display: table">
    <thead>
        <tr>
        <th>File</th>
        <th>Lot #</th>
        <th>Material</th>
        <th>Expiry Date</th>
        <th>Analysis Date</th>
        </tr>
    </thead>
</table>
 */
function UICreateQCFileTable(): HTMLTableElement {
    const maxRows = 100;
    const data = GetData();
    // create table
    const table = document.createElement('table') as HTMLTableElement;
    table.setAttribute('id', 'qcfiletable');
    table.setAttribute('class', 'table');
    // create table header
    const thead = document.createElement('thead');
    const tr = document.createElement('tr');
    thead.appendChild(tr);
    table.appendChild(thead);
    const tbody = document.createElement('tbody');
    table.appendChild(tbody);

    const th1 = document.createElement('th');
    th1.innerText = 'File';
    const th2 = document.createElement('th');
    th2.innerText = 'Lot#';
    const thlast = document.createElement('th');
    thlast.innerText = 'Analysis Date';

    tr.appendChild(th1);
    tr.appendChild(th2);
    
    console.log(data);
    data.then((data) => {
        if (data !== null) {
            // create th for each Subgroup=SampleInfo unique value of Item
            let sampleInfo = data.filter((row) => row['Subgroup'] === 'SampleInfo').map((row) => row['Item']);
            let headingInfoUnique = [...new Set(sampleInfo)];
            
            headingInfoUnique.forEach((item) => {
                let th = document.createElement('th');
                th.innerText = item as string;
                tr.appendChild(th);
            });
            tr.appendChild(thlast);
        }
    });

    return table;
}

export { UICreateQCFileTableDataRows, eventHandlerQCFiles };