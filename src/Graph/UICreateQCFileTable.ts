import { LineGraph, IChartData } from '../Graph/UICreateLineGraph';
import { GetData } from '../Data/GetGSheetsData';

var graphscontainerID: string = 'graphscontainer';
let container = document.getElementById(graphscontainerID);
if (!container) {
    console.error('Graphs container not found.');
}

/** Creates Table of Graphs for parameters of itemid  */
function GraphQCFile(itemid: string = 'QC-002') {
    const subgroup = 'HAParameter';
    let data = GetData();
    data.then((data) => {
        document.getElementById('graphscontainer').innerHTML = "";
        if (data !== null) {
            // filter data for the first Item = itemid
            let parentItem = data.find((item) => item['Item'] === itemid);
            let analysisdates = parentItem['Analysis dates -->'];
            let xData = analysisdates.split(';');

            // filter data for items that have Groups= itemid and subgroup = 'HA Praameter'
            let paramerterData = data.filter((item) => {
                return item['Groups'] === itemid && item['Subgroup'] === subgroup;
            });

            // for each parameterData, create new LineGraph
            paramerterData.forEach((item) => {
                const id = item['Item'].toLowerCase().replace(/[^A-Z0-9]/ig, '');
                const yData = xData.map((s, i) => {
                    let dateHeader = 'Date' + (i + 1);
                    return Number(item[dateHeader]);
                });
                const yTitle = item['Label'].length > 0 ? item['Label'] : item['Item'];
                const yMin = Number(item['AllowedMin']);
                const yMax = Number(item['AllowedMax']); //console.log(yData);
                const chartData: IChartData = {
                    canvasId: id,
                    xData: xData,
                    yData: yData,
                    yTitle: yTitle,
                    yMin: yMin,
                    yMax: yMax
                }
                const chart = new LineGraph(chartData);
                chart.AddDataPoint();

            });

        }
    });
}

/** Create HTMLs Table from GetData where Groups="QCSample" 
 * Headers: File, Lot#, Material, Exp. Date, Analysis dates
 * File: autogenerated line number
 * Lot#: Label or Item
 * Material: Description
*/
function UICreateQCFileTable(): HTMLTableElement {
    const maxRows = 100;
    const data = GetData();
    // create table
    const table = document.createElement('table') as HTMLTableElement;
    table.setAttribute('id', 'qcfiletable');
    table.setAttribute('class', 'table');
    // create table header
    const thead = document.createElement('thead');
    const tr = document.createElement('tr');
    thead.appendChild(tr);
    table.appendChild(thead);
    const tbody = document.createElement('tbody');
    table.appendChild(tbody);

    const th1 = document.createElement('th');
    th1.innerText = 'File';
    const th2 = document.createElement('th');
    th2.innerText = 'Lot#';
    const thlast = document.createElement('th');
    thlast.innerText = 'Analysis Date';

    tr.appendChild(th1);
    tr.appendChild(th2);
    
    console.log(data);
    data.then((data) => {
        if (data !== null) {
            // filter data for items that have Groups="QCSample"
            let sampleData = data.filter((row) => {
                return row['Groups'] === 'QCSample';
            });

            // create th for each Subgroup=SampleInfo unique value of Item
            let sampleInfo = data.filter((row) => row['Subgroup'] === 'SampleInfo').map((row) => row['Item']);
            let headingInfoUnique = [...new Set(sampleInfo)];
            headingInfoUnique.forEach((item) => {
                let th = document.createElement('th');
                th.innerText = item as string;
                tr.appendChild(th);
            });
            tr.appendChild(thlast);

            // create row for each sampleData where 
            // td1 = autogenerated line number
            // td2 = Label or Item
            // td(n) = lookup data Description where subgroup=SampleInfo, Groups=Item, Item=headingInfoUnique
            // td(last) = last column is the item's most recent analysis date
            sampleData.forEach((item, i) => {
                let id = item['Item'].toLowerCase().replace(/[^A-Z0-9]/ig, '');
                let tr = document.createElement('tr');
                tbody.appendChild(tr);
                let td1 = document.createElement('td');
                let td1text = "QC"+(i+1).toString().padStart(maxRows.toString().length, '0');
                td1.innerText = td1text;
                tr.appendChild(td1);
                let td2 = document.createElement('td');
                td2.innerText = item['Label'].length > 0 ? item['Label'] : item['Item'];
                tr.appendChild(td2);

                // create td(n) from each headingInfoUnique
                headingInfoUnique.forEach((heading) => {
                    let td = document.createElement('td');
                    let coldata = data.find((row) => {
                        let ret = row['Subgroup'] === 'SampleInfo' && row['Groups'] === item['Item'] && row['Item'] === heading;
                        return ret;
                    });
                    td.innerText = coldata ? coldata['Description'] : 'not found';
                    tr.setAttribute('id', id);
                    tr.appendChild(td);
                });

                // create td(last) for most recent analysis date

                let tdlast = document.createElement('td');
                let analysisdates = item['Analysis dates -->'];
                let analysisdatesArray = analysisdates.split(';');
                tdlast.innerText = analysisdatesArray[analysisdatesArray.length - 1];
                tr.appendChild(tdlast);

                // add click event to each row
                tr.addEventListener('click', function () {  
                    GraphQCFile(item['Item']);
                    // hide table
                    table.style.display = 'none';
                    // add back button that shows table
                    const backbutton = document.createElement('button');            // create button element

                    backbutton.innerText = "Back";                               // set button text

                    backbutton.addEventListener('click', function () {
                        table.style.display = 'table';
                        document.getElementById('graphscontainer').innerHTML = "";
                        document.getElementById('top-menu')?.removeChild(backbutton);
                    });
                    document.getElementById('top-menu')?.appendChild(backbutton);  
                });

            });


        }
    });

    return table;
}

export { GraphQCFile, UICreateQCFileTable };